R-14.11 Would you use the adjacency matrix structure or the adjacency list structure in
each of the following cases? Justify your choice.

a. The graph has 10,000 vertices and 20,000 edges, and it is important to use
as little space as possible.

b. The graph has 10,000 vertices and 20,000,000 edges, and it is important to
use as little space as possible.

c. You need to answer the query getEdge(u, v) as fast as possible, no matter
how much space you use.

Answer:
=======

a: It would be better use an adjacency list structure because a 10,000-by-10,000 
matrix has 100,000,000 positions. Even that was necessary stored the double of 
the edges (edge E must be stored both in matrix[A][B] and in matrix[B][A]. So 
40,000 = 20,000 * 2), there would be 99,960,000 positions null. Futhermore, 
an adjacency matrix uses O(nÂ²) space while a adjacency list structure uses
O(n + m) (n = vertices, m = edges).

b. Probably it would be better to use an adjacency list structure, because even 
with 20,000,000 edges, less of the half of an adjacency matrix would be used to 
store all edges.

c. In this case, it would be better to use an adjacency matrix structure to 
answer the query getEdge(u, v) as fast as possible, because this query runs in 
O(1) in an adjacency matrix structure against O(min(du, dv)) in an adjacency 
list structure.